/*
 * Sohu_uiView.java
 */

package com.mu.tv.ui;

import com.mu.tv.EpisodeStatus;
import com.mu.tv.analyzer.CCTVAnalyzer;
import com.mu.tv.analyzer.SohuAnalyzer;
import com.mu.tv.analyzer.TudouAnalyzer;
import com.mu.tv.dao.DownloadTaskDAO;
import com.mu.tv.dao.EpisodeDAO;
import com.mu.tv.dao.ProgramDAO;
import com.mu.tv.dao.filter.Filter;
import com.mu.tv.dao.filter.Sequence;
import com.mu.tv.download.TaskMgr;
import com.mu.tv.download.TaskStatus;
import com.mu.tv.entity.DownloadTask;
import com.mu.tv.entity.Episode;
import com.mu.tv.entity.Program;
import com.mu.util.StringUtil;
import com.mu.util.log.Log;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.ListSelectionModel;
import javax.swing.Timer;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.application.Application.ExitListener;

/**
 * The application's main frame.
 */
public class Sohu_uiView extends FrameView {

    public Sohu_uiView(SingleFrameApplication app) {
        super(app);

        initComponents();
        init();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            }
        });
        messageTimer.setRepeats(false);
    }

    @Action
    public void showAboutBox() {
        /*if (aboutBox == null) {
            JFrame mainFrame = Sohu_uiApp.getApplication().getMainFrame();
            aboutBox = new Sohu_uiAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        Sohu_uiApp.getApplication().show(aboutBox);*/
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jToolBar1 = new javax.swing.JToolBar();
        btnAddProg = new javax.swing.JButton();
        btnDelProg = new javax.swing.JButton();
        btnStartAll = new javax.swing.JButton();
        btnStopAll = new javax.swing.JButton();
        btnClearQueue = new javax.swing.JButton();
        btnMoreDownloader = new javax.swing.JButton();
        btnLessDownloader = new javax.swing.JButton();
        btnFolder = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        listProg = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEpi = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDetail = new javax.swing.JTextArea();
        jSplitPane4 = new javax.swing.JSplitPane();
        jSplitPane5 = new javax.swing.JSplitPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        listTask = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblTask = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtTaskStatus = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        ppmTask = new javax.swing.JPopupMenu();
        miStartTask = new javax.swing.JMenuItem();
        miStartHighPriority = new javax.swing.JMenuItem();
        miStopTask = new javax.swing.JMenuItem();
        miRedownload = new javax.swing.JMenuItem();
        miOpenFolder = new javax.swing.JMenuItem();
        miRemoveTask = new javax.swing.JMenuItem();
        ppmEpisode = new javax.swing.JPopupMenu();
        miStartEpi = new javax.swing.JMenuItem();
        miStartEpiHighPriority = new javax.swing.JMenuItem();
        miStopEpi = new javax.swing.JMenuItem();
        miCombineEpi = new javax.swing.JMenuItem();
        miAnalyzeEpi = new javax.swing.JMenuItem();
        miRemove = new javax.swing.JMenuItem();
        miSkip = new javax.swing.JMenuItem();
        ppmProgram = new javax.swing.JPopupMenu();
        miStartProg = new javax.swing.JMenuItem();
        miStartProgHighPriority = new javax.swing.JMenuItem();
        miStopProg = new javax.swing.JMenuItem();
        miCheckUpdate = new javax.swing.JMenuItem();

        mainPanel.setMinimumSize(new java.awt.Dimension(800, 800));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setOpaque(false);
        mainPanel.setPreferredSize(new java.awt.Dimension(1046, 860));

        jSplitPane3.setBorder(null);
        jSplitPane3.setDividerSize(0);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane3.setName("jSplitPane3"); // NOI18N

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(Sohu_uiView.class);
        btnAddProg.setText(resourceMap.getString("btnAddProg.text")); // NOI18N
        btnAddProg.setFocusable(false);
        btnAddProg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddProg.setName("btnAddProg"); // NOI18N
        btnAddProg.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddProg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProgActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAddProg);

        btnDelProg.setText(resourceMap.getString("btnDelProg.text")); // NOI18N
        btnDelProg.setFocusable(false);
        btnDelProg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelProg.setName("btnDelProg"); // NOI18N
        btnDelProg.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelProg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelProgActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDelProg);

        btnStartAll.setText(resourceMap.getString("btnStartAll.text")); // NOI18N
        btnStartAll.setFocusable(false);
        btnStartAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnStartAll.setName("btnStartAll"); // NOI18N
        btnStartAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnStartAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartAllActionPerformed(evt);
            }
        });
        jToolBar1.add(btnStartAll);

        btnStopAll.setText(resourceMap.getString("btnStopAll.text")); // NOI18N
        btnStopAll.setFocusable(false);
        btnStopAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnStopAll.setName("btnStopAll"); // NOI18N
        btnStopAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnStopAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopAllActionPerformed(evt);
            }
        });
        jToolBar1.add(btnStopAll);

        btnClearQueue.setText(resourceMap.getString("btnClearQueue.text")); // NOI18N
        btnClearQueue.setFocusable(false);
        btnClearQueue.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClearQueue.setName("btnClearQueue"); // NOI18N
        btnClearQueue.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnClearQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearQueueActionPerformed(evt);
            }
        });
        jToolBar1.add(btnClearQueue);

        btnMoreDownloader.setText(resourceMap.getString("btnMoreDownloader.text")); // NOI18N
        btnMoreDownloader.setFocusable(false);
        btnMoreDownloader.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnMoreDownloader.setName("btnMoreDownloader"); // NOI18N
        btnMoreDownloader.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnMoreDownloader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoreDownloaderActionPerformed(evt);
            }
        });
        jToolBar1.add(btnMoreDownloader);

        btnLessDownloader.setText(resourceMap.getString("btnLessDownloader.text")); // NOI18N
        btnLessDownloader.setFocusable(false);
        btnLessDownloader.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLessDownloader.setName("btnLessDownloader"); // NOI18N
        btnLessDownloader.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLessDownloader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLessDownloaderActionPerformed(evt);
            }
        });
        jToolBar1.add(btnLessDownloader);

        btnFolder.setText(resourceMap.getString("btnFolder.text")); // NOI18N
        btnFolder.setFocusable(false);
        btnFolder.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFolder.setName("btnFolder"); // NOI18N
        btnFolder.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFolderActionPerformed(evt);
            }
        });
        jToolBar1.add(btnFolder);

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jSplitPane3.setLeftComponent(jToolBar1);

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jSplitPane1.setDividerLocation(584);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jSplitPane2.setDividerLocation(184);
        jSplitPane2.setName("jSplitPane2"); // NOI18N
        jSplitPane2.setPreferredSize(new java.awt.Dimension(1790, 250));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        listProg.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "All"};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listProg.setName("listProg"); // NOI18N
        listProg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listProgMouseReleased(evt);
            }
        });
        listProg.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listProgValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listProg);

        jSplitPane2.setLeftComponent(jScrollPane1);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tblEpi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Name", "Status"
            }
        ));
        tblEpi.setName("tblEpi"); // NOI18N
        tblEpi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblEpiMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tblEpi);

        jSplitPane2.setRightComponent(jScrollPane2);

        jSplitPane1.setTopComponent(jSplitPane2);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        txtDetail.setColumns(20);
        txtDetail.setRows(5);
        txtDetail.setName("txtDetail"); // NOI18N
        jScrollPane3.setViewportView(txtDetail);

        jSplitPane1.setRightComponent(jScrollPane3);

        jTabbedPane1.addTab(resourceMap.getString("jSplitPane1.TabConstraints.tabTitle"), jSplitPane1); // NOI18N

        jSplitPane4.setDividerLocation(584);
        jSplitPane4.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane4.setName("jSplitPane4"); // NOI18N

        jSplitPane5.setDividerLocation(83);
        jSplitPane5.setName("jSplitPane5"); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        listTask.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "All", "Downloading", "Finished" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listTask.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listTask.setName("listTask"); // NOI18N
        listTask.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listTaskValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listTask);

        jSplitPane5.setLeftComponent(jScrollPane4);

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        tblTask.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Status","Size", "Downloaded", "%", "Cur Speed", "Average Speed", "Resumable"
            }
        ));
        tblTask.setName("tblTask"); // NOI18N
        tblTask.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblTaskMouseReleased(evt);
            }
        });
        jScrollPane5.setViewportView(tblTask);

        jSplitPane5.setRightComponent(jScrollPane5);

        jSplitPane4.setTopComponent(jSplitPane5);

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        txtTaskStatus.setColumns(20);
        txtTaskStatus.setRows(5);
        txtTaskStatus.setName("txtTaskStatus"); // NOI18N
        jScrollPane6.setViewportView(txtTaskStatus);

        jSplitPane4.setRightComponent(jScrollPane6);

        jTabbedPane1.addTab(resourceMap.getString("jSplitPane4.TabConstraints.tabTitle"), jSplitPane4); // NOI18N

        jSplitPane3.setRightComponent(jTabbedPane1);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1046, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(Sohu_uiView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        ppmTask.setName("ppmTask"); // NOI18N

        miStartTask.setText(resourceMap.getString("miStartTask.text")); // NOI18N
        miStartTask.setName("miStartTask"); // NOI18N
        miStartTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStartTaskActionPerformed(evt);
            }
        });
        ppmTask.add(miStartTask);

        miStartHighPriority.setText(resourceMap.getString("miStartHighPriority.text")); // NOI18N
        miStartHighPriority.setName("miStartHighPriority"); // NOI18N
        miStartHighPriority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStartHighPriorityActionPerformed(evt);
            }
        });
        ppmTask.add(miStartHighPriority);

        miStopTask.setText(resourceMap.getString("miStopTask.text")); // NOI18N
        miStopTask.setName("miStopTask"); // NOI18N
        miStopTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStopTaskActionPerformed(evt);
            }
        });
        ppmTask.add(miStopTask);

        miRedownload.setText(resourceMap.getString("miRedownload.text")); // NOI18N
        miRedownload.setName("miRedownload"); // NOI18N
        miRedownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRedownloadActionPerformed(evt);
            }
        });
        ppmTask.add(miRedownload);

        miOpenFolder.setText(resourceMap.getString("miOpenFolder.text")); // NOI18N
        miOpenFolder.setName("miOpenFolder"); // NOI18N
        miOpenFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenFolderActionPerformed(evt);
            }
        });
        ppmTask.add(miOpenFolder);

        miRemoveTask.setText(resourceMap.getString("miRemoveTask.text")); // NOI18N
        miRemoveTask.setActionCommand(resourceMap.getString("miRemoveTask.actionCommand")); // NOI18N
        miRemoveTask.setName("miRemoveTask"); // NOI18N
        miRemoveTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRemoveTaskActionPerformed(evt);
            }
        });
        ppmTask.add(miRemoveTask);

        ppmEpisode.setName("ppmEpisode"); // NOI18N

        miStartEpi.setText(resourceMap.getString("miStartEpi.text")); // NOI18N
        miStartEpi.setActionCommand(resourceMap.getString("miStartEpi.actionCommand")); // NOI18N
        miStartEpi.setName("miStartEpi"); // NOI18N
        miStartEpi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStartEpiActionPerformed(evt);
            }
        });
        ppmEpisode.add(miStartEpi);

        miStartEpiHighPriority.setText(resourceMap.getString("miStartEpiHighPriority.text")); // NOI18N
        miStartEpiHighPriority.setName("miStartEpiHighPriority"); // NOI18N
        miStartEpiHighPriority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStartEpiHighPriorityActionPerformed(evt);
            }
        });
        ppmEpisode.add(miStartEpiHighPriority);

        miStopEpi.setText(resourceMap.getString("miStopEpi.text")); // NOI18N
        miStopEpi.setName("miStopEpi"); // NOI18N
        miStopEpi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStopEpiActionPerformed(evt);
            }
        });
        ppmEpisode.add(miStopEpi);

        miCombineEpi.setText(resourceMap.getString("miCombineEpi.text")); // NOI18N
        miCombineEpi.setName("miCombineEpi"); // NOI18N
        miCombineEpi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCombineEpiActionPerformed(evt);
            }
        });
        ppmEpisode.add(miCombineEpi);

        miAnalyzeEpi.setText(resourceMap.getString("miAnalyzeEpi.text")); // NOI18N
        miAnalyzeEpi.setName("miAnalyzeEpi"); // NOI18N
        miAnalyzeEpi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAnalyzeEpiActionPerformed(evt);
            }
        });
        ppmEpisode.add(miAnalyzeEpi);

        miRemove.setText(resourceMap.getString("miRemove.text")); // NOI18N
        miRemove.setName("miRemove"); // NOI18N
        miRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRemoveActionPerformed(evt);
            }
        });
        ppmEpisode.add(miRemove);
        miRemove.getAccessibleContext().setAccessibleName(resourceMap.getString("miRemove.AccessibleContext.accessibleName")); // NOI18N

        miSkip.setText(resourceMap.getString("miSkip.text")); // NOI18N
        miSkip.setName("miSkip"); // NOI18N
        miSkip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSkipActionPerformed(evt);
            }
        });
        ppmEpisode.add(miSkip);

        ppmProgram.setName("ppmProgram"); // NOI18N

        miStartProg.setText(resourceMap.getString("miStartProg.text")); // NOI18N
        miStartProg.setName("miStartProg"); // NOI18N
        miStartProg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStartProgActionPerformed(evt);
            }
        });
        ppmProgram.add(miStartProg);

        miStartProgHighPriority.setText(resourceMap.getString("miStartProgHighPriority.text")); // NOI18N
        miStartProgHighPriority.setName("miStartProgHighPriority"); // NOI18N
        miStartProgHighPriority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStartProgHighPriorityActionPerformed(evt);
            }
        });
        ppmProgram.add(miStartProgHighPriority);

        miStopProg.setText(resourceMap.getString("miStopProg.text")); // NOI18N
        miStopProg.setName("miStopProg"); // NOI18N
        miStopProg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStopProgActionPerformed(evt);
            }
        });
        ppmProgram.add(miStopProg);

        miCheckUpdate.setText(resourceMap.getString("miCheckUpdate.text")); // NOI18N
        miCheckUpdate.setName("miCheckUpdate"); // NOI18N
        miCheckUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCheckUpdateActionPerformed(evt);
            }
        });
        ppmProgram.add(miCheckUpdate);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void listProgValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_listProgValueChanged
    {//GEN-HEADEREND:event_listProgValueChanged
        if(listProg.getSelectedIndex()==0)
        {
            txtDetail.setText("All");            
        }
        else
        {
            Program p = (Program)listProg.getSelectedValue();
            txtDetail.setText(StringUtil.toReadable(p));
        }
        filterEpi();
    }//GEN-LAST:event_listProgValueChanged

    private void btnAddProgActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddProgActionPerformed
    {//GEN-HEADEREND:event_btnAddProgActionPerformed
        if (dlgNewProg == null)
        {
            JFrame mainFrame = Sohu_uiApp.getApplication().getMainFrame();
            dlgNewProg = new SohuNewProgDlg(mainFrame);
            dlgNewProg.setLocationRelativeTo(mainFrame);
        }
        Sohu_uiApp.getApplication().show(dlgNewProg);
        init();

    }//GEN-LAST:event_btnAddProgActionPerformed

    private void btnDelProgActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDelProgActionPerformed
    {//GEN-HEADEREND:event_btnDelProgActionPerformed
        if(listProg.getSelectedIndex()==0)
            return;
        else
        {
            Program p = (Program) listProg.getSelectedValue();
            ProgramDAO.remove(p);
        }
        init();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDelProgActionPerformed

    private void listTaskValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_listTaskValueChanged
    {//GEN-HEADEREND:event_listTaskValueChanged
        filterTask();
    }//GEN-LAST:event_listTaskValueChanged

    private void btnStartAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnStartAllActionPerformed
    {//GEN-HEADEREND:event_btnStartAllActionPerformed
        Filter f = new Filter("DownloadTask");
        f.addNotEqual("status", TaskStatus.Finished);
        f.addOrderBy(new Sequence("id"));
        List<DownloadTask> list = DownloadTaskDAO.get(f);
        for(DownloadTask t : list)
            taskMgr.start(t);
    }//GEN-LAST:event_btnStartAllActionPerformed

    private void btnStopAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnStopAllActionPerformed
    {//GEN-HEADEREND:event_btnStopAllActionPerformed
        Filter f = new Filter("DownloadTask");
        f.addNotEqual("status", TaskStatus.Finished);
        List<DownloadTask> list = DownloadTaskDAO.get(f);
        for(DownloadTask t : list)
            taskMgr.stop(t);        // TODO add your handling code here:
    }//GEN-LAST:event_btnStopAllActionPerformed

    private void tblTaskMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblTaskMouseReleased
    {//GEN-HEADEREND:event_tblTaskMouseReleased
        if(evt.isPopupTrigger())
        {
            ppmTask.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblTaskMouseReleased

    private void tblEpiMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblEpiMouseReleased
    {//GEN-HEADEREND:event_tblEpiMouseReleased
        if(evt.isPopupTrigger())
        {
            ppmEpisode.show(evt.getComponent(), evt.getX(), evt.getY());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_tblEpiMouseReleased

    private void listProgMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_listProgMouseReleased
    {//GEN-HEADEREND:event_listProgMouseReleased
        if(evt.isPopupTrigger())
        {
            ppmProgram.show(evt.getComponent(), evt.getX(), evt.getY());
        }

    }//GEN-LAST:event_listProgMouseReleased

    private void miStartTaskActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miStartTaskActionPerformed
    {//GEN-HEADEREND:event_miStartTaskActionPerformed
        ArrayList<DownloadTask> list = this.getSelectedTasks();
        taskMgr.start(list);
        ppmTask.setVisible(false);
    }//GEN-LAST:event_miStartTaskActionPerformed

    private void miStopTaskActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miStopTaskActionPerformed
    {//GEN-HEADEREND:event_miStopTaskActionPerformed
        ArrayList<DownloadTask> list = this.getSelectedTasks();
        taskMgr.stop(list);
        ppmTask.setVisible(false);

    }//GEN-LAST:event_miStopTaskActionPerformed

    private void miRedownloadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miRedownloadActionPerformed
    {//GEN-HEADEREND:event_miRedownloadActionPerformed
        ArrayList<DownloadTask> list = this.getSelectedTasks();
        taskMgr.reStart(list);
        ppmTask.setVisible(false);

        // TODO add your handling code here:
    }//GEN-LAST:event_miRedownloadActionPerformed

    private void miStartEpiActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miStartEpiActionPerformed
    {//GEN-HEADEREND:event_miStartEpiActionPerformed
        ArrayList<Episode> list = this.getSelectedEpi();
        for(Episode e : list)
            taskMgr.start(e.getTaskList());
        ppmEpisode.setVisible(false);

    }//GEN-LAST:event_miStartEpiActionPerformed

    private void miStopEpiActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miStopEpiActionPerformed
    {//GEN-HEADEREND:event_miStopEpiActionPerformed
        ArrayList<Episode> list = this.getSelectedEpi();
        for(Episode e : list)
            taskMgr.stop(e.getTaskList());
        ppmEpisode.setVisible(false);

    }//GEN-LAST:event_miStopEpiActionPerformed

    private void miCombineEpiActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miCombineEpiActionPerformed
    {//GEN-HEADEREND:event_miCombineEpiActionPerformed
        ArrayList<Episode> list = this.getSelectedEpi();
        for(Episode e : list)
            e.combineEpi();
        ppmEpisode.setVisible(false);

    }//GEN-LAST:event_miCombineEpiActionPerformed

    private void miStartProgActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miStartProgActionPerformed
    {//GEN-HEADEREND:event_miStartProgActionPerformed
        Object o = listProg.getSelectedValue();
        if(o.getClass() == Program.class)
        {
            Program p = (Program)listProg.getSelectedValue();
            for(Episode e : p.getEpisodeList())
                taskMgr.start(e.getTaskList());
        }
        else
            btnStartAllActionPerformed(null);
        ppmProgram.setVisible(false);

    }//GEN-LAST:event_miStartProgActionPerformed

    private void miStopProgActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miStopProgActionPerformed
    {//GEN-HEADEREND:event_miStopProgActionPerformed
        Object o = listProg.getSelectedValue();
        if(o.getClass() == Program.class)
        {
            Program p = (Program)listProg.getSelectedValue();
            for(Episode e : p.getEpisodeList())
                taskMgr.stop(e.getTaskList());
        }
        else
            btnStopAllActionPerformed(null);
        ppmProgram.setVisible(false);
    }//GEN-LAST:event_miStopProgActionPerformed

    private void btnMoreDownloaderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnMoreDownloaderActionPerformed
    {//GEN-HEADEREND:event_btnMoreDownloaderActionPerformed
        taskMgr.moreThread();
    }//GEN-LAST:event_btnMoreDownloaderActionPerformed

    private void btnLessDownloaderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLessDownloaderActionPerformed
    {//GEN-HEADEREND:event_btnLessDownloaderActionPerformed
        taskMgr.lessThread();
    }//GEN-LAST:event_btnLessDownloaderActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitMenuItemActionPerformed
    {//GEN-HEADEREND:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void btnFolderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnFolderActionPerformed
    {//GEN-HEADEREND:event_btnFolderActionPerformed

        Object o = listProg.getSelectedValue();
        File dir=null;
        if(o.getClass() == Program.class)
        {
            Program p = (Program)o;
            dir = new File("download"+File.separator + p.getName());
        }
        else
            dir = new File("download");
        if(!dir.exists())
            dir.mkdirs();
        try{
        Runtime.getRuntime().exec(String.format("explorer \"%s\"", dir.getAbsolutePath()));
        }catch(Exception e){ Log.error(e);}
    }//GEN-LAST:event_btnFolderActionPerformed

    private void miOpenFolderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miOpenFolderActionPerformed
    {//GEN-HEADEREND:event_miOpenFolderActionPerformed
        ArrayList<DownloadTask> list = getSelectedTasks();
        if(list == null || list.size()==0)
            return;

        File f = new File(list.get(0).getDest());
        try{
        Runtime.getRuntime().exec(String.format("explorer \"%s\"", f.getParentFile().getAbsolutePath()));
        }catch(Exception e){ Log.error(e);}

    }//GEN-LAST:event_miOpenFolderActionPerformed

    private void miStartHighPriorityActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miStartHighPriorityActionPerformed
    {//GEN-HEADEREND:event_miStartHighPriorityActionPerformed
        ArrayList<DownloadTask> list = this.getSelectedTasks();
        taskMgr.startAfterCurOne(list);
        ppmTask.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_miStartHighPriorityActionPerformed

    private void btnClearQueueActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnClearQueueActionPerformed
    {//GEN-HEADEREND:event_btnClearQueueActionPerformed
        Filter f = new Filter("DownloadTask");
        f.addEqual("status", TaskStatus.Waiting_for_Start);
        List<DownloadTask> list = DownloadTaskDAO.get(f);
        taskMgr.stop(list);
    }//GEN-LAST:event_btnClearQueueActionPerformed

    private void miStartEpiHighPriorityActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miStartEpiHighPriorityActionPerformed
    {//GEN-HEADEREND:event_miStartEpiHighPriorityActionPerformed
        ArrayList<Episode> list = this.getSelectedEpi();
        for(int i=list.size()-1; i>=0; i--)
            taskMgr.startAfterCurOne(list.get(i).getTaskList());
        ppmEpisode.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_miStartEpiHighPriorityActionPerformed

    private void miStartProgHighPriorityActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miStartProgHighPriorityActionPerformed
    {//GEN-HEADEREND:event_miStartProgHighPriorityActionPerformed
        Object o = listProg.getSelectedValue();
        if(o.getClass() == Program.class)
        {
            Program p = (Program)listProg.getSelectedValue();
            List<Episode> list = p.getEpisodeList();
            for(int i=list.size()-1; i>=0; i--)
                taskMgr.startAfterCurOne(list.get(i).getTaskList());
        }
        else
            btnStartAllActionPerformed(null);
        ppmProgram.setVisible(false);
    }//GEN-LAST:event_miStartProgHighPriorityActionPerformed

    private void miAnalyzeEpiActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miAnalyzeEpiActionPerformed
    {//GEN-HEADEREND:event_miAnalyzeEpiActionPerformed
        ArrayList<Episode> l = getSelectedEpi();
        for(Episode e : l)
        {
            if(e.getProgram().getSource()!=null && e.getProgram().getSource().equalsIgnoreCase("cctv"))
                CCTVAnalyzer.reanalyzeEpisode(e);
            else if(e.getProgram().getSource() != null && e.getProgram().getSource().equalsIgnoreCase("tudou"))
                TudouAnalyzer.reanalyzeEpisode(e);
            else
                SohuAnalyzer.reanalyzeEpisode(e);
            EpisodeDAO.update(e);
        }
        init();
    }//GEN-LAST:event_miAnalyzeEpiActionPerformed

    private void miRemoveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miRemoveActionPerformed
    {//GEN-HEADEREND:event_miRemoveActionPerformed
        ArrayList<Episode> l = getSelectedEpi();
        for(Episode e : l)
        {
            e.getProgram().getEpisodeList().remove(e);
            EpisodeDAO.remove(e);
        }
        init();
    }//GEN-LAST:event_miRemoveActionPerformed

    private void miCheckUpdateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miCheckUpdateActionPerformed
    {//GEN-HEADEREND:event_miCheckUpdateActionPerformed
        Object o = listProg.getSelectedValue();
        if(o.getClass() == Program.class)
        {
            Program p = (Program)listProg.getSelectedValue();
            if(p.getSource()!=null && p.getSource().equalsIgnoreCase("cctv"))
                p = CCTVAnalyzer.getProg(p.getUrl(), p.getName(), p.getUseWebName());
            else if(p.getSource() != null && p.getSource().equalsIgnoreCase("tudou"))
                p = TudouAnalyzer.getProg(p.getUrl(), p.getName(), p.getUseWebName());
            else
                p = SohuAnalyzer.getProg(p.getUrl(), p.getName(), p.getUseWebName());
            ProgramDAO.update(p);
        }
        ppmProgram.setVisible(false);
        init();
    }//GEN-LAST:event_miCheckUpdateActionPerformed

    private void miSkipActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miSkipActionPerformed
    {//GEN-HEADEREND:event_miSkipActionPerformed
        ArrayList<Episode> l = getSelectedEpi();
        for(Episode e : l)
        {
            taskMgr.stop(e.getTaskList());
            DownloadTaskDAO.removeByEpisode(e);
            e.getTaskList().clear();
            e.setStatus(EpisodeStatus.Skipped);
            EpisodeDAO.update(e);
        }
        init();
        // TODO add your handling code here:
    }//GEN-LAST:event_miSkipActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        if (dlgConvetToMp4 == null)
        {
            JFrame mainFrame = Sohu_uiApp.getApplication().getMainFrame();
            dlgConvetToMp4 = new SohuConvetFormat(mainFrame);
            dlgConvetToMp4.setLocationRelativeTo(mainFrame);
        }
        Sohu_uiApp.getApplication().show(dlgConvetToMp4);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void miRemoveTaskActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miRemoveTaskActionPerformed
    {//GEN-HEADEREND:event_miRemoveTaskActionPerformed
        ArrayList<DownloadTask> l = getSelectedTasks();
        for(DownloadTask d : l)
            DownloadTaskDAO.remove(d);
        filterTask();
    }//GEN-LAST:event_miRemoveTaskActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProg;
    private javax.swing.JButton btnClearQueue;
    private javax.swing.JButton btnDelProg;
    private javax.swing.JButton btnFolder;
    private javax.swing.JButton btnLessDownloader;
    private javax.swing.JButton btnMoreDownloader;
    private javax.swing.JButton btnStartAll;
    private javax.swing.JButton btnStopAll;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JList listProg;
    private javax.swing.JList listTask;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem miAnalyzeEpi;
    private javax.swing.JMenuItem miCheckUpdate;
    private javax.swing.JMenuItem miCombineEpi;
    private javax.swing.JMenuItem miOpenFolder;
    private javax.swing.JMenuItem miRedownload;
    private javax.swing.JMenuItem miRemove;
    private javax.swing.JMenuItem miRemoveTask;
    private javax.swing.JMenuItem miSkip;
    private javax.swing.JMenuItem miStartEpi;
    private javax.swing.JMenuItem miStartEpiHighPriority;
    private javax.swing.JMenuItem miStartHighPriority;
    private javax.swing.JMenuItem miStartProg;
    private javax.swing.JMenuItem miStartProgHighPriority;
    private javax.swing.JMenuItem miStartTask;
    private javax.swing.JMenuItem miStopEpi;
    private javax.swing.JMenuItem miStopProg;
    private javax.swing.JMenuItem miStopTask;
    private javax.swing.JPopupMenu ppmEpisode;
    private javax.swing.JPopupMenu ppmProgram;
    private javax.swing.JPopupMenu ppmTask;
    private javax.swing.JTable tblEpi;
    private javax.swing.JTable tblTask;
    private javax.swing.JTextArea txtDetail;
    private javax.swing.JTextArea txtTaskStatus;
    // End of variables declaration//GEN-END:variables
    private String[] epiCol = new String[] {"Name", "Status"};
    private String[] taskCol = new String[] {"Name", "Status", "Size", "Downloaded", "%", "Cur Speed", "Aver Speed"};

    private final Timer messageTimer;
    private JDialog dlgNewProg;
    private JDialog dlgConvetToMp4;
    private TaskMgr taskMgr = new TaskMgr();
    private TableUpdater taskUpdater = new TableUpdater();
 


    private void init()
    {
        bindCloseEvent();
        initProgList();
        initEpiTbl();
        initTaskTbl();
        filterEpi();
        filterTask();
    }

    private void bindCloseEvent()
    {
        
        Sohu_uiApp.getApplication().addExitListener(new ExitListener()
        {
            public boolean canExit(EventObject e)
            {
                Log.info("canExit");
                btnStopAllActionPerformed(null);
                return true;
            }
            public void willExit(EventObject event)
            {
                Log.info("willExit");
            }
        });
        
    }

    private void initProgList()
    {
        ArrayList<Program> programs = new ArrayList<Program>();
        programs.addAll(ProgramDAO.getAll());
        DefaultListModel modle = new DefaultListModel();
        modle.clear();
        modle.addElement("All");
        for(Program p : programs)
        {
            modle.addElement(p);
        }
        listProg.setModel(modle);
        listProg.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listProg.setSelectedIndex(modle.getSize()-1);
    }

    private void initEpiTbl()
    {
        tblEpi.getSelectionModel().addListSelectionListener(new EpiListSelectionHandler());
    }
    private void initTaskTbl()
    {
        tblTask.getSelectionModel().addListSelectionListener(new TaskListSelectionHandler());
        listTask.setSelectedIndex(1);
    }

    private void filterEpi()
    {
        ArrayList<Episode> l = new ArrayList<Episode>();
        if(listProg.getSelectedIndex()==0)
            l.addAll(EpisodeDAO.get(new Filter("Episode")));
        else
        {
            Program p = (Program) listProg.getSelectedValue();
            if(p!=null)
                l.addAll(p.getEpisodeList());
        }
        DefaultTableModel m = (DefaultTableModel)tblEpi.getModel();

        Object[][] data = new Object[l.size()][tblEpi.getColumnCount()];
        int i=0;
        for(Episode p : l)
        {
            p.addObserver(taskUpdater);
            data[i][0] = p;
            data[i][1] = p.getStatus().toString();
            i++;
        }
        m.setDataVector(data, epiCol);

    }

    private void filterTask()
    {
        ArrayList<DownloadTask> l = new ArrayList<DownloadTask>();
        String selected = (String)listTask.getSelectedValue();
        Filter f = new Filter("DownloadTask");
        if(selected.equals("Downloading"))
        {
            f.addNotEqual("status", TaskStatus.Finished);
        }
        else if(selected.equals("Finished"))
        {
            f.addEqual("status", TaskStatus.Finished);
        }
        f.addOrderBy(new Sequence("id"));
        l.addAll(DownloadTaskDAO.get(f));

        DefaultTableModel m = (DefaultTableModel)tblTask.getModel();

        Object[][] data = new Object[l.size()][tblTask.getColumnCount()];
        int i=0;
        for(DownloadTask p : l)
        {
            p.addObserver(taskUpdater);
            data[i][0] = p;
            data[i][1] = p.getStatus().toString();
            data[i][2] = p.getTotal();
            data[i][3] = p.getDownloaded();
            data[i][4] = p.getTotal()>0? p.getDownloaded()*100/p.getTotal() : 0;
            data[i][5] = p.getCurSpeed()+" KB";
            data[i][6] = p.getAverSpeed()+" KB";
            //data[i][7] = p.getResumable();
            i++;
        }
        m.setDataVector(data, taskCol);

    }

    private ArrayList<Episode> getSelectedEpi()
    {
        ArrayList<Episode> re = new ArrayList<Episode> ();
        int[] arr = tblEpi.getSelectedRows();
        for(int i:arr)
        {
            Object o = tblEpi.getModel().getValueAt(i, 0);
            if(o.getClass() == Episode.class)
                re.add((Episode)o);
            else
                Log.info("Unknown Selected Epi, "+o);
        }
        return re;
    }
    private ArrayList<DownloadTask> getSelectedTasks()
    {
        ArrayList<DownloadTask> re = new ArrayList<DownloadTask> ();
        int[] arr = tblTask.getSelectedRows();
        for(int i:arr)
        {
            re.add((DownloadTask)tblTask.getModel().getValueAt(i, 0));
        }
        return re;
    }

    class EpiListSelectionHandler implements ListSelectionListener
    {
        public void valueChanged(ListSelectionEvent e)
        {
            ArrayList<Episode> arr = getSelectedEpi();
            if(arr.size()>0)
                txtDetail.setText(StringUtil.toReadable(arr.get(0)));
        }
    }
    class TaskListSelectionHandler implements ListSelectionListener
    {
        public void valueChanged(ListSelectionEvent e)
        {
            ArrayList<DownloadTask> arr = getSelectedTasks();
            if(arr.size()>0)
                txtTaskStatus.setText(StringUtil.toReadable(arr.get(0)));
        }
    }

    class TableUpdater implements Observer
    {
        public void update(Observable source, Object arg)
        {
            //MuLog.log("Informed");
            if(source.getClass().equals(DownloadTask.class))
            {
                int i = findTaskRowIndex((DownloadTask)source);
                //MuLog.log("Row no:"+i);
                if(i!=-1)
                {
                    DefaultTableModel tmTask = (DefaultTableModel)tblTask.getModel();
                    DownloadTask p = (DownloadTask) source;
                    //tmTask.setValueAt(p, i, 0);
                    tmTask.setValueAt(p.getStatus().toString(), i, 1);
                    tmTask.setValueAt(p.getTotal(), i, 2);
                    tmTask.setValueAt(p.getDownloaded(), i, 3);
                    tmTask.setValueAt(p.getPercentage(), i, 4);
                    tmTask.setValueAt(p.getCurSpeed()+" KB", i, 5);
                    tmTask.setValueAt(p.getAverSpeed()+" KB", i, 6);
                    //tmTask.setValueAt(p.getResumable(), i, 7);
                }
            }
            else if(source.getClass().equals(Episode.class))
            {
                int i = findEpiRowIndex((Episode)source);
                if(i!=-1)
                {
                    DefaultTableModel tmEpisode = (DefaultTableModel)tblEpi.getModel();
                    Episode p = (Episode) source;
                    //tmEpisode.setValueAt(p, i, 0);
                    tmEpisode.setValueAt(p.getStatus(), i, 1);
                }
            }
        }

    }

    private int findTaskRowIndex(DownloadTask t)
    {
        for(int i=0; i< tblTask.getModel().getRowCount(); i++)
        {
            DownloadTask c= (DownloadTask)tblTask.getModel().getValueAt(i, 0);
            if(t.getId() == c.getId())
                return i;
        }
             return -1;
    }

    private int findEpiRowIndex(Episode t)
    {
        for(int i=0; i< tblEpi.getModel().getRowCount(); i++)
        {
            Object o = tblEpi.getModel().getValueAt(i, 0);
            if(o.getClass()==Episode.class)
            {
                Episode c= (Episode)o;
                if(t.getId() == c.getId())
                    return i;
            }
            else
                Log.info("Not an episode, %s, Type:%s, row: %d", o, o.getClass().toString(), i);
        }
        return -1;
    }

}
